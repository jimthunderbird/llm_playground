Generate PHP, HTML, CSS, and JavaScript code for a simple web page with user login and a basic shopping cart that integrates with Stripe for checkout.

**PHP (index.php):**
- Start a session to manage user login status.
- Implement a simple in-memory user authentication system with an 'admin' user and a pre-hashed password (using `password_hash()`). **Crucially, note that in a real application, user data should be stored securely in a database.** The provided hash is `$2y$10$SAx/EaoCbJ5xIlACuwfq2u6DqlBnIPT26iizO3BQsmbnmEi2esQH2` for the username 'admin'.
- Handle a 'logout' action via a GET request, which unsets session variables and destroys the session. Redirect to `index.php`.
- Handle a 'login' action via a POST request. It should:
    - Receive 'username' and 'password' via POST.
    - Validate if the username exists in the `$users` array.
    - Use `password_verify()` to check if the provided password matches the stored hash.
    - On successful login:
        - Regenerate the session ID.
        - Set `$_SESSION['loggedin']` to `true`.
        - Set `$_SESSION['username']` to the logged-in username.
        - Return a JSON response `{ success: true }`.
    - On failed login, return a JSON response `{ success: false, message: '...' }` with an appropriate error message.
    - Set the `Content-Type` header to `application/json` for login responses and `exit()` after echoing the JSON.
- Determine the login status (`$is_logged_in_php`) based on the `$_SESSION['loggedin']` variable for conditional HTML rendering.

**HTML:**
- Structure the page with a `<head>` including meta tags, a `<title>Shopping Cart with Stripe</title>`, and embedded `<style>` for CSS.
- Conditionally display content based on `$is_logged_in_php`:
    - **If not logged in:** Display a login form (`<div id="login-form-container">`) with labels and input fields for 'username' and 'password', and a 'Login' button (`<button id="login-button">`). Include an empty `div` with `id="message-container"` to display login error/success messages.
    - **If logged in:**
        - Display a heading `<h1>Products</h1>`.
        - Create a `div` with `id="product-list"` containing several `div` elements with the class `product-item`. Each `product-item` should represent a product (e.g., 'Product A', 'Product B', etc.) with a name, a price (e.g., '$10', '$15'), and an "Add to Cart" button (`<button>`) with `data-product` and `data-price` attributes. Include at least five example products.
        - Create a `div` with `id="cart-container"` to display the shopping cart. It should have a heading `<h2>Your Cart</h2>`, an empty `div` with `id="cart-items"` to list cart contents, a paragraph with `id="total-price"` initialized to "Total: $0", a "Checkout with Stripe" button (`<button id="checkout-button">`), and a paragraph with `id="message"` for displaying cart-related messages.
        - Include a "Logout" link (`<a href="index.php?action=logout" id="logout-button">Logout</a>`).
- Include the Stripe JavaScript library: `<script src="https://js.stripe.com/v3/"></script>`.
- Include a `<script>` block for the JavaScript logic.

**CSS:**
- Style the `body` for basic font, margins, padding, background, and flex layout to center content.
- Style `#login-form-container` for background, padding, margin, border, and centering within the page. Style its labels, inputs, and the login button for better appearance.
- Style `#logout-button` to look like a button with appropriate colors and spacing.
- Style `h1` for centered text.
- Style `#product-list` as a flex container to display products in a row that wraps on smaller screens.
- Style `.product-item` for background, padding, margin, border-radius, box-shadow, text alignment, and flex layout for its contents. Style the product name (`h3`), price (`p`), and the "Add to Cart" button within it.
- Style `#cart-container` for background, padding, margin, border-radius, box-shadow, and maximum width. Center it on the page.
- Style `#cart-container h2`, `#cart-items`, `.cart-item` (with flex layout for name/quantity and price), `#total-price`, and `#checkout-button`.
- Style `.message`, `.success-message`, and `.error-message` for displaying feedback to the user.
- Include a media query for `(max-width: 600px)` to adjust the layout for smaller screens, making the product list and cart stack vertically and take up more width.

**JavaScript:**
- Use `document.addEventListener('DOMContentLoaded', function() { ... });` to ensure the script runs after the DOM is fully loaded.
- Get references to the login form elements (`message-container`, `login-button`, `username`, `password`). **Ensure these are only accessed if they exist on the page (i.e., when the user is not logged in).**
- Implement an `attemptLogin()` function that:
    - Gets the values from the username and password input fields.
    - Performs basic client-side validation (check for empty fields).
    - Uses `fetch()` to send a POST request to the same `index.php` file with the username and password in `application/x-www-form-urlencoded` format.
    - Handles the JSON response:
        - If `data.success` is true, display a success message and reload the page (`window.location.reload()`) to show the logged-in view.
        - If `data.success` is false, display the error message from `data.message` in the `message-container`.
    - Includes error handling for the `fetch` request.
- Implement a `displayLoginMessage(msg, type)` function to show messages in the `message-container` with appropriate styling based on the `type` ('success' or 'error').
- Add event listeners to the login button and the password input (for 'Enter' key press) to trigger the `attemptLogin()` function.
- Get references to the product list (`product-list`), cart elements (`cart-items`, `total-price`, `checkout-button`), and the cart message element (`message`). **Ensure these are only accessed if they exist on the page (i.e., when the user is logged in).**
- Initialize an empty `cart` object and a `total` variable to 0.
- Initialize the Stripe object with a **placeholder** publishable key: `const stripe = Stripe('pk_test_YOUR_PUBLISHABLE_KEY');` **Remember to replace `'pk_test_YOUR_PUBLISHABLE_KEY'` with your actual Stripe Publishable Key.**
- Add an event listener to the `product-list`. When an "Add to Cart" button is clicked:
    - Get the `data-product` and `data-price` attributes from the clicked button.
    - Update the `cart` object and the `total`.
    - Call an `updateCartDisplay()` function.
- Implement `updateCartDisplay()` to:
    - Clear the content of `cart-items`.
    - Iterate through the `cart` object and dynamically create HTML elements to display each item (name, quantity, price).
    - Update the `total-price` element.
    - Disable the `checkout-button` if the cart is empty and update its styling.
- Add an event listener to the `checkout-button`. When clicked:
    - Check if the cart is empty and display a message if so.
    - Use `fetch()` to send a POST request to a **server-side endpoint** (`/create-checkout-session` - **this endpoint needs to be implemented separately on your server to handle Stripe API calls with your secret key**). The request body should be JSON containing the cart items in the format expected by Stripe's Checkout Sessions API (including `price_data` with currency, product name, unit amount in cents, and quantity).
    - Handle the JSON response from your server:
        - If there's an `error`, display it to the user.
        - If there's a `sessionId`, redirect the user to the Stripe Checkout page using `stripe.redirectToCheckout({ sessionId: data.sessionId })`. Handle any errors during redirection.
        - If the response is invalid, display an error message.
    - Include error handling for the `fetch` request.
- Implement a `displayCartMessage(msg, type)` function to show messages related to the cart (e.g., checkout status) in the `message` element.
- Call `updateCartDisplay()` once on page load (if the cart elements are present) to reflect any items that might be in the cart (though in this basic example, the cart state is only client-side and resets on page load).
